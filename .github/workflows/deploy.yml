name: üöÄ Build & Deploy 

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: production

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üü¶ Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: üíæ Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/pnpm/store/v3
            node_modules
            */node_modules
          key: deps-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            deps-${{ runner.os }}-

      - name: üì¶ Install dependencies
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: |
            - recursive: true
              args: [--frozen-lockfile, --prefer-offline]

      - name: üß™ Run backend tests
        run: |
          echo "üß™ Running backend test suite with coverage..."
          COVERAGE_REPORTERS=text pnpm --filter backend test:coverage
          echo "‚úÖ All backend tests passed with coverage!"
        continue-on-error: false

      - name: üèóÔ∏è Build frontend
        run: pnpm build:frontend
        env:
          VITE_TURNSTILE_SITE_KEY: ${{ secrets.VITE_TURNSTILE_SITE_KEY }}

      - name: üîë Set up SSH agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: üóùÔ∏è Add known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts

      - name: üöÄ Deploy backend
        timeout-minutes: 5
        run: |
          STEP_START=$(date +%s)
          echo "üì§ Copying backend files to ${{ secrets.BACKEND_PATH }} ..."
          ssh root@${{ secrets.VPS_IP }} "mkdir -p ${{ secrets.BACKEND_PATH }}"
          START=$(date +%s)
          rsync -az --delete --info=progress2 \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude '__tests__' \
            --exclude 'coverage' \
            --exclude 'lcov-report' \
            backend/ root@${{ secrets.VPS_IP }}:${{ secrets.BACKEND_PATH }}/
          END=$(date +%s)
          echo "‚è±Ô∏è Backend rsync took $((END-START)) seconds."
          cd $GITHUB_WORKSPACE
          echo "üìù Creating deployment script..."
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          BACKEND_PATH=${{ secrets.BACKEND_PATH }}
          echo "üîÑ Checking and installing Node.js if needed..."
          if ! command -v node >/dev/null 2>&1; then
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          echo "üîÑ Checking and installing PM2 if needed..."
          if ! command -v pm2 >/dev/null 2>&1; then
            sudo npm install -g pm2
          fi
          echo "üîÑ Checking and installing pnpm if needed..."
          if ! command -v pnpm >/dev/null 2>&1; then
            sudo npm install -g pnpm@10
          fi
          echo "üìÅ Creating and setting permissions for directories..."
          sudo mkdir -p $BACKEND_PATH
          sudo chown -R amiroff:amiroff $BACKEND_PATH
          echo "üîë Setting up environment variables..."
          cat > $BACKEND_PATH/.env << 'ENVEOF'
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          TURNSTILE_SECRET_KEY=${{ secrets.TURNSTILE_SECRET_KEY }}
          PORT=5000
          NODE_ENV=production
          ENVEOF
          sudo chown amiroff:amiroff $BACKEND_PATH/.env
          sudo chmod 600 $BACKEND_PATH/.env
          echo "üì¶ Installing backend dependencies..."
          cd $BACKEND_PATH
          START_PNPM=$(date +%s)
          pnpm install --prod
          END_PNPM=$(date +%s)
          echo "‚è±Ô∏è pnpm install took $((END_PNPM-START_PNPM)) seconds."
          echo "üõë Stopping all existing PM2 processes (if any)..."
          START_PM2=$(date +%s)
          pm2 stop all || true
          pm2 delete all || true
          echo "üöÄ Starting backend with PM2..."
          pm2 start index.js --name "stackconverter-backend" --user amiroff -f
          pm2 save
          pm2 startup
          END_PM2=$(date +%s)
          echo "‚è±Ô∏è PM2 restart/startup took $((END_PM2-START_PM2)) seconds."
          echo "‚úÖ Deployment completed successfully!"
          echo "üîß Backend: http://localhost:5000"
          EOF
          chmod +x deploy.sh
          STEP_SSH_START=$(date +%s)
          ssh root@${{ secrets.VPS_IP }} 'bash -s' < deploy.sh
          STEP_SSH_END=$(date +%s)
          echo "‚è±Ô∏è SSH deploy.sh block took $((STEP_SSH_END-STEP_SSH_START)) seconds."
          STEP_END=$(date +%s)
          echo "‚è±Ô∏è Total backend deploy step took $((STEP_END-STEP_START)) seconds."

      - name: üöÄ Deploy frontend
        run: |
          echo "üì§ Copying frontend build to ${{ secrets.FRONTEND_PATH }} ..."
          ssh root@${{ secrets.VPS_IP }} "mkdir -p ${{ secrets.FRONTEND_PATH }}"
          START=$(date +%s)
          rsync -az --delete --info=progress2 -e "ssh -o StrictHostKeyChecking=no" \
            frontend/dist/ root@${{ secrets.VPS_IP }}:${{ secrets.FRONTEND_PATH }}/
          END=$(date +%s)
          echo "‚è±Ô∏è Frontend rsync took $((END-START)) seconds."

      - name: ‚úÖ Run health check
        run: |
          echo "üîç Checking PM2 status and backend health..."
          START_HEALTH_STEP=$(date +%s)
          START_HEALTH=$(date +%s)
          ssh root@${{ secrets.VPS_IP }} '
            START_PM2=$(date +%s)
            pm2 status | grep stackconverter-backend
            END_PM2=$(date +%s)
            echo "‚è±Ô∏è PM2 status check took $((END_PM2-START_PM2)) seconds."
            START_CURL=$(date +%s)
            curl -s http://localhost:5000/ > /dev/null && echo "‚úÖ Backend healthy" || echo "‚ùå Backend not responding"
            END_CURL=$(date +%s)
            echo "‚è±Ô∏è curl health check took $((END_CURL-START_CURL)) seconds."
            START_LS1=$(date +%s)
            ls -la ${{ secrets.FRONTEND_PATH }}
            END_LS1=$(date +%s)
            echo "‚è±Ô∏è ls frontend took $((END_LS1-START_LS1)) seconds."
            START_LS2=$(date +%s)
            ls -la ${{ secrets.BACKEND_PATH }}
            END_LS2=$(date +%s)
            echo "‚è±Ô∏è ls backend took $((END_LS2-START_LS2)) seconds."
          '
          END_HEALTH=$(date +%s)
          echo "‚è±Ô∏è Total health check (inside SSH) took $((END_HEALTH-START_HEALTH)) seconds."
          END_HEALTH_STEP=$(date +%s)
          echo "‚è±Ô∏è Total health check step took $((END_HEALTH_STEP-START_HEALTH_STEP)) seconds."
          echo "üéâ Deployment Summary:"
          echo "‚úÖ Frontend: https://amiroff.me/stackconverter/"
          echo "‚úÖ Backend: http://localhost:5000"
          echo "‚úÖ PM2 managing backend process"
          echo "‚úÖ Environment variables configured"
          echo ""
          echo "üìù Next steps:"
          echo "1. Test the application at https://amiroff.me/stackconverter/"
          echo "2. Check PM2 logs: pm2 logs stackconverter-backend"
          echo "3. Monitor with: pm2 monit"